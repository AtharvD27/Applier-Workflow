{
  "version": 4,
  "terraform_version": "1.12.2",
  "serial": 4,
  "lineage": "a38c67fb-2601-06eb-7df7-4ac9dd50ccc0",
  "outputs": {
    "availability_zone": {
      "value": "us-east-1a",
      "type": "string"
    },
    "browser_data_location": {
      "value": "Browser data persisted at /mnt/browsers on EBS volume",
      "type": "string"
    },
    "browser_volume_status": {
      "value": "Browser volume vol-06834ddf3f58d41a8 attached as /dev/xvdf",
      "type": "string"
    },
    "elastic_ip": {
      "value": "13.219.19.98",
      "type": "string"
    },
    "instance_id": {
      "value": "i-0278921f0b792c722",
      "type": "string"
    },
    "instance_type": {
      "value": "m5.large",
      "type": "string"
    },
    "public_ip": {
      "value": "44.204.46.5",
      "type": "string"
    },
    "rdp_connection": {
      "value": "RDP to 13.219.19.98:3389 (user: ubuntu, pass: YourStrongPassword)",
      "type": "string"
    }
  },
  "resources": [
    {
      "mode": "data",
      "type": "aws_ebs_volume",
      "name": "browser_data",
      "provider": "provider[\"registry.terraform.io/hashicorp/aws\"]",
      "instances": [
        {
          "schema_version": 0,
          "attributes": {
            "arn": "arn:aws:ec2:us-east-1:789994815208:volume/vol-06834ddf3f58d41a8",
            "availability_zone": "us-east-1a",
            "create_time": "2025-07-15T03:47:56Z",
            "encrypted": false,
            "filter": [
              {
                "name": "volume-id",
                "values": [
                  "vol-06834ddf3f58d41a8"
                ]
              }
            ],
            "id": "vol-06834ddf3f58d41a8",
            "iops": 3000,
            "kms_key_id": "",
            "most_recent": false,
            "multi_attach_enabled": false,
            "outpost_arn": "",
            "region": "us-east-1",
            "size": 8,
            "snapshot_id": "",
            "tags": {
              "Browser-Data-Volume": "",
              "Name": "Browser-Data-Volume"
            },
            "throughput": 125,
            "timeouts": null,
            "volume_id": "vol-06834ddf3f58d41a8",
            "volume_type": "gp3"
          },
          "sensitive_attributes": [],
          "identity_schema_version": 0
        }
      ]
    },
    {
      "mode": "data",
      "type": "aws_eip",
      "name": "static",
      "provider": "provider[\"registry.terraform.io/hashicorp/aws\"]",
      "instances": [
        {
          "schema_version": 0,
          "attributes": {
            "arn": "arn:aws:ec2:us-east-1:789994815208:elastic-ip/eipalloc-097c2ba45b51396c8",
            "association_id": "eipassoc-00d2407e2a914550f",
            "carrier_ip": "",
            "customer_owned_ip": "",
            "customer_owned_ipv4_pool": "",
            "domain": "vpc",
            "filter": [
              {
                "name": "allocation-id",
                "values": [
                  "eipalloc-097c2ba45b51396c8"
                ]
              }
            ],
            "id": "eipalloc-097c2ba45b51396c8",
            "instance_id": "i-06aed8d8baa0db506",
            "ipam_pool_id": null,
            "network_interface_id": "eni-0c146b073223d7d51",
            "network_interface_owner_id": "789994815208",
            "private_dns": "ip-172-31-27-115.ec2.internal",
            "private_ip": "172.31.27.115",
            "ptr_record": "",
            "public_dns": "ec2-13-219-19-98.compute-1.amazonaws.com",
            "public_ip": "13.219.19.98",
            "public_ipv4_pool": "amazon",
            "region": "us-east-1",
            "tags": {
              "LinkedIn-VM-EIP": "",
              "Name": "LinkedIn VM IP"
            },
            "timeouts": null
          },
          "sensitive_attributes": [],
          "identity_schema_version": 0
        }
      ]
    },
    {
      "mode": "data",
      "type": "aws_security_group",
      "name": "launch_sg",
      "provider": "provider[\"registry.terraform.io/hashicorp/aws\"]",
      "instances": [
        {
          "schema_version": 0,
          "attributes": {
            "arn": "arn:aws:ec2:us-east-1:789994815208:security-group/sg-08e3357b5355a8c4a",
            "description": "launch-wizard-1 created 2025-06-10T05:20:17.894Z",
            "filter": null,
            "id": "sg-08e3357b5355a8c4a",
            "name": "launch-wizard-1",
            "region": "us-east-1",
            "tags": {
              "Name": "Linkedln-VM-SG"
            },
            "timeouts": null,
            "vpc_id": "vpc-00fb4fcb86c126ea1"
          },
          "sensitive_attributes": [],
          "identity_schema_version": 0
        }
      ]
    },
    {
      "mode": "data",
      "type": "template_file",
      "name": "user_data",
      "provider": "provider[\"registry.terraform.io/hashicorp/template\"]",
      "instances": [
        {
          "schema_version": 0,
          "attributes": {
            "filename": null,
            "id": "0ff92b2ac469cf46261052998e0247ea64b56442fde996f813427286c7c48d49",
            "rendered": "#!/bin/bash\n\n# Update system\napt-get update \u0026\u0026 apt-get upgrade -y\n\n# --- Essential packages only ---\napt-get install -y htop git unzip curl software-properties-common\n\n# Set timezone\ntimedatectl set-timezone America/New_York\n\n# Create 2GB swap file for better performance\nfallocate -l 2G /swapfile\nchmod 600 /swapfile\nmkswap /swapfile\nswapon /swapfile\necho '/swapfile none swap sw 0 0' \u003e\u003e /etc/fstab\n\n# Optimize system performance\ncat \u003e\u003e /etc/sysctl.conf \u003c\u003c EOF\n# Optimize for desktop performance\nvm.swappiness=10\nvm.vfs_cache_pressure=50\nnet.core.rmem_max=16777216\nnet.core.wmem_max=16777216\nEOF\nsysctl -p\n\n# Install lightweight desktop (LXDE)\nDEBIAN_FRONTEND=noninteractive apt-get install -y lxde-core lxdm xrdp ufw\n\necho 'ubuntu:YourStrongPassword' | chpasswd\n\n# Configure RDP session\necho \"startlxde\" \u003e /home/ubuntu/.xsession\nchown ubuntu:ubuntu /home/ubuntu/.xsession\n\n# Optimize RDP for better performance\ncat \u003e\u003e /etc/xrdp/xrdp.ini \u003c\u003c EOF\n[Globals]\nbitmap_cache=yes\nbitmap_compression=yes\nbulk_compression=yes\nmax_bpp=16\nEOF\n\n# Enable and start services\nsystemctl enable xrdp\nsystemctl start xrdp\nsystemctl enable lxdm\n\n# Configure firewall\nufw allow 3389\nufw --force enable\n\n# Wait and detect browser volume\necho \"Waiting for browser volume to be attached...\"\nBROWSER_DEVICE=\"\"\nBROWSER_VOLUME_ID=\"vol-06834ddf3f58d41a8\"\n\n# Wait up to 3 minutes for the volume to appear\nfor i in {1..36}; do\n    echo \"Checking for browser volume... attempt $i/36\"\n    \n    # Check multiple possible device names\n    for device in /dev/xvdf /dev/nvme1n1 /dev/nvme2n1 /dev/sdf; do\n        if [ -b \"$device\" ]; then\n            # Verify this is our browser volume by checking size (8GB)\n            DEVICE_SIZE=$(lsblk -b -n -o SIZE \"$device\" 2\u003e/dev/null | head -n1)\n            if [ \"$DEVICE_SIZE\" = \"8589934592\" ]; then  # 8GB in bytes\n                BROWSER_DEVICE=\"$device\"\n                echo \"✅ Browser volume found at: $BROWSER_DEVICE\"\n                break 2\n            fi\n        fi\n    done\n    \n    # Also try to find by AWS volume ID using nvme-cli (if available)\n    if command -v nvme \u0026\u003e /dev/null; then\n        for nvme_device in /dev/nvme*n1; do\n            if [ -b \"$nvme_device\" ]; then\n                NVME_INFO=$(nvme id-ctrl \"$nvme_device\" 2\u003e/dev/null | grep -o \"vol-[a-zA-Z0-9]*\" | head -n1 || echo \"\")\n                if [ \"$NVME_INFO\" = \"$BROWSER_VOLUME_ID\" ]; then\n                    BROWSER_DEVICE=\"$nvme_device\"\n                    echo \"✅ Browser volume found by volume ID at: $BROWSER_DEVICE\"\n                    break 2\n                fi\n            fi\n        done\n    fi\n    \n    sleep 5\ndone\n\n# Mount the browser volume if found\nif [ -n \"$BROWSER_DEVICE\" ]; then\n    echo \"Mounting browser volume from $BROWSER_DEVICE...\"\n    \n    # Create mount point\n    mkdir -p /mnt/browsers\n    \n    # Mount the browser volume (already formatted and configured)\n    if mount \"$BROWSER_DEVICE\" /mnt/browsers; then\n        echo \"✅ Browser volume mounted successfully!\"\n        \n        # Add to fstab for automatic mounting on boot\n        BROWSER_UUID=$(blkid -s UUID -o value \"$BROWSER_DEVICE\")\n        if [ -n \"$BROWSER_UUID\" ]; then\n            echo \"UUID=$BROWSER_UUID /mnt/browsers ext4 defaults 0 2\" \u003e\u003e /etc/fstab\n            echo \"✅ Added to fstab for automatic mounting\"\n        fi\n        \n        # Set proper ownership\n        chown -R ubuntu:ubuntu /mnt/browsers\n        \n        # Verify our data is there\n        if [ -d \"/mnt/browsers/scripts\" ]; then\n            echo \"✅ Browser scripts found on volume\"\n        fi\n        if [ -d \"/mnt/browsers/Drive\" ]; then\n            echo \"✅ Drive folder found on volume\"\n        fi\n        if [ -d \"/mnt/browsers/brave-data\" ] || [ -d \"/mnt/browsers/firefox-data\" ]; then\n            echo \"✅ Browser profile data found on volume\"\n        fi\n        \n    else\n        echo \"❌ Failed to mount browser volume\"\n        mkdir -p /mnt/browsers\n        chown ubuntu:ubuntu /mnt/browsers\n    fi\nelse\n    echo \"❌ Browser volume not found after 3 minutes\"\n    echo \"Available block devices:\"\n    lsblk\n    echo \"Creating placeholder directory...\"\n    mkdir -p /mnt/browsers\n    chown ubuntu:ubuntu /mnt/browsers\nfi\n\n# Install browsers (binaries need to be installed on each instance)\necho \"Installing browsers...\"\n\n# Install Brave Browser\ncurl -fsSLo /usr/share/keyrings/brave-browser-archive-keyring.gpg https://brave-browser-apt-release.s3.brave.com/brave-browser-archive-keyring.gpg\necho \"deb [signed-by=/usr/share/keyrings/brave-browser-archive-keyring.gpg arch=amd64] https://brave-browser-apt-release.s3.brave.com/ stable main\" | tee /etc/apt/sources.list.d/brave-browser-release.list\napt-get update\napt-get install -y brave-browser\n\n# Install Firefox\napt-get install -y firefox\n\n# Create launcher scripts in home directory (pointing to EBS scripts)\necho \"Creating launcher scripts...\"\n\n# Brave LinkedIn Optimized Launcher\ncat \u003e /home/ubuntu/brave-linkedin.sh \u003c\u003c 'EOF'\n#!/bin/bash\n# Launch optimized Brave script from EBS volume\nif [ -f \"/mnt/browsers/scripts/brave-linkedin.sh\" ]; then\n    /mnt/browsers/scripts/brave-linkedin.sh \"$@\"\nelse\n    echo \"Optimized Brave script not found on EBS volume\"\n    brave-browser --user-data-dir=/mnt/browsers/brave-data \"$@\"\nfi\nEOF\n\n# Firefox LinkedIn Optimized Launcher\ncat \u003e /home/ubuntu/firefox-linkedin.sh \u003c\u003c 'EOF'\n#!/bin/bash\n# Launch optimized Firefox script from EBS volume\nif [ -f \"/mnt/browsers/scripts/firefox-linkedin.sh\" ]; then\n    /mnt/browsers/scripts/firefox-linkedin.sh \"$@\"\nelse\n    echo \"Optimized Firefox script not found on EBS volume\"\n    firefox -profile /mnt/browsers/firefox-data \"$@\"\nfi\nEOF\n\n# Normal Brave Launcher (using EBS data directory)\ncat \u003e /home/ubuntu/brave-normal.sh \u003c\u003c 'EOF'\n#!/bin/bash\n# Normal Brave with EBS data persistence\nbrave-browser \\\n  --user-data-dir=/mnt/browsers/brave-data \\\n  --no-first-run \\\n  --no-default-browser-check \\\n  \"$@\"\nEOF\n\n# Normal Firefox Launcher (using EBS data directory)\ncat \u003e /home/ubuntu/firefox-normal.sh \u003c\u003c 'EOF'\n#!/bin/bash\n# Normal Firefox with EBS data persistence\nmkdir -p /mnt/browsers/firefox-data\nfirefox -profile /mnt/browsers/firefox-data \"$@\"\nEOF\n\n# Make all scripts executable\nchmod +x /home/ubuntu/*.sh\n\n# Create desktop shortcuts\necho \"Creating desktop shortcuts...\"\nmkdir -p /home/ubuntu/Desktop\n\n# Brave LinkedIn Optimized shortcut\ncat \u003e /home/ubuntu/Desktop/Brave-LinkedIn-Optimized.desktop \u003c\u003c 'EOF'\n[Desktop Entry]\nVersion=1.0\nType=Application\nName=Brave LinkedIn (Optimized)\nComment=Brave Browser Optimized for LinkedIn Automation\nExec=/home/ubuntu/brave-linkedin.sh\nIcon=brave-browser\nTerminal=false\nCategories=Network;WebBrowser;\nStartupNotify=true\nEOF\n\n# Firefox LinkedIn Optimized shortcut\ncat \u003e /home/ubuntu/Desktop/Firefox-LinkedIn-Optimized.desktop \u003c\u003c 'EOF'\n[Desktop Entry]\nVersion=1.0\nType=Application\nName=Firefox LinkedIn (Optimized)\nComment=Firefox Browser Optimized for LinkedIn Automation\nExec=/home/ubuntu/firefox-linkedin.sh\nIcon=firefox\nTerminal=false\nCategories=Network;WebBrowser;\nStartupNotify=true\nEOF\n\n# Normal Brave shortcut\ncat \u003e /home/ubuntu/Desktop/Brave-Normal.desktop \u003c\u003c 'EOF'\n[Desktop Entry]\nVersion=1.0\nType=Application\nName=Brave (Normal)\nComment=Brave Browser with Full Features\nExec=/home/ubuntu/brave-normal.sh\nIcon=brave-browser\nTerminal=false\nCategories=Network;WebBrowser;\nStartupNotify=true\nEOF\n\n# Normal Firefox shortcut\ncat \u003e /home/ubuntu/Desktop/Firefox-Normal.desktop \u003c\u003c 'EOF'\n[Desktop Entry]\nVersion=1.0\nType=Application\nName=Firefox (Normal)\nComment=Firefox Browser with Full Features\nExec=/home/ubuntu/firefox-normal.sh\nIcon=firefox\nTerminal=false\nCategories=Network;WebBrowser;\nStartupNotify=true\nEOF\n\n# Browser Volume / Drive folder shortcut\ncat \u003e /home/ubuntu/Desktop/Drive-Folder.desktop \u003c\u003c 'EOF'\n[Desktop Entry]\nVersion=1.0\nType=Application\nName=Drive Folder\nComment=Access Drive folder on Browser Volume\nExec=pcmanfm /mnt/browsers/Drive\nIcon=folder\nTerminal=false\nCategories=System;FileManager;\nStartupNotify=true\nEOF\n\n# Browser Data folder shortcut (for easy access to all browser data)\ncat \u003e /home/ubuntu/Desktop/Browser-Data.desktop \u003c\u003c 'EOF'\n[Desktop Entry]\nVersion=1.0\nType=Application\nName=Browser Data\nComment=Access Browser Data on EBS Volume\nExec=pcmanfm /mnt/browsers\nIcon=folder\nTerminal=false\nCategories=System;FileManager;\nStartupNotify=true\nEOF\n\n# Make desktop shortcuts executable\nchmod +x /home/ubuntu/Desktop/*.desktop\n\n# Create browser volume status check script\ncat \u003e /home/ubuntu/check-browsers.sh \u003c\u003c 'EOF'\n#!/bin/bash\necho \"=== Browser Volume Status ===\"\nif mountpoint -q /mnt/browsers; then\n    echo \"✅ Browser volume is mounted\"\n    echo \"Available space:\"\n    df -h /mnt/browsers\n    echo \"\"\n    echo \"Browser data directories:\"\n    ls -la /mnt/browsers/\n    echo \"\"\n    echo \"Available scripts on volume:\"\n    if [ -d \"/mnt/browsers/scripts\" ]; then\n        ls -la /mnt/browsers/scripts/\n    else\n        echo \"No scripts directory found\"\n    fi\nelse\n    echo \"❌ Browser volume is not mounted\"\n    echo \"Attempting to mount...\"\n    sudo mount /dev/xvdf /mnt/browsers 2\u003e/dev/null\n    if mountpoint -q /mnt/browsers; then\n        echo \"✅ Successfully mounted browser volume\"\n    else\n        echo \"❌ Failed to mount browser volume\"\n    fi\nfi\n\necho \"\"\necho \"=== Available Browser Launchers ===\"\necho \"Optimized Brave:  ~/brave-linkedin.sh (recommended for automation)\"\necho \"Optimized Firefox: ~/firefox-linkedin.sh (backup for automation)\"\necho \"Normal Brave:     ~/brave-normal.sh\"\necho \"Normal Firefox:   ~/firefox-normal.sh\"\necho \"\"\necho \"=== Desktop Shortcuts Available ===\"\necho \"- Brave LinkedIn (Optimized)\"\necho \"- Firefox LinkedIn (Optimized)\"\necho \"- Brave (Normal)\"\necho \"- Firefox (Normal)\"\necho \"- Drive Folder\"\necho \"- Browser Data\"\nEOF\nchmod +x /home/ubuntu/check-browsers.sh\n\n# Set proper ownership for all user files\nchown -R ubuntu:ubuntu /home/ubuntu/\n\n# Clean up to save space\napt-get autoremove -y\napt-get autoclean\nrm -rf /var/lib/apt/lists/*\nrm -rf /tmp/*\n\n# Create startup optimization script\ncat \u003e /home/ubuntu/optimize.sh \u003c\u003c 'EOF'\n#!/bin/bash\n# Run this after connecting to optimize performance\necho \"Optimizing system performance...\"\nsudo sysctl vm.drop_caches=3\nsudo systemctl restart xrdp\necho \"System optimized!\"\nEOF\nchmod +x /home/ubuntu/optimize.sh\nchown ubuntu:ubuntu /home/ubuntu/optimize.sh\n\necho \"Setup complete! Browser volume with persistent data ready for use.\"\necho \"Run ~/check-browsers.sh to verify browser volume status and available launchers\"",
            "template": "#!/bin/bash\n\n# Update system\napt-get update \u0026\u0026 apt-get upgrade -y\n\n# --- Essential packages only ---\napt-get install -y htop git unzip curl software-properties-common\n\n# Set timezone\ntimedatectl set-timezone America/New_York\n\n# Create 2GB swap file for better performance\nfallocate -l 2G /swapfile\nchmod 600 /swapfile\nmkswap /swapfile\nswapon /swapfile\necho '/swapfile none swap sw 0 0' \u003e\u003e /etc/fstab\n\n# Optimize system performance\ncat \u003e\u003e /etc/sysctl.conf \u003c\u003c EOF\n# Optimize for desktop performance\nvm.swappiness=10\nvm.vfs_cache_pressure=50\nnet.core.rmem_max=16777216\nnet.core.wmem_max=16777216\nEOF\nsysctl -p\n\n# Install lightweight desktop (LXDE)\nDEBIAN_FRONTEND=noninteractive apt-get install -y lxde-core lxdm xrdp ufw\n\necho 'ubuntu:YourStrongPassword' | chpasswd\n\n# Configure RDP session\necho \"startlxde\" \u003e /home/ubuntu/.xsession\nchown ubuntu:ubuntu /home/ubuntu/.xsession\n\n# Optimize RDP for better performance\ncat \u003e\u003e /etc/xrdp/xrdp.ini \u003c\u003c EOF\n[Globals]\nbitmap_cache=yes\nbitmap_compression=yes\nbulk_compression=yes\nmax_bpp=16\nEOF\n\n# Enable and start services\nsystemctl enable xrdp\nsystemctl start xrdp\nsystemctl enable lxdm\n\n# Configure firewall\nufw allow 3389\nufw --force enable\n\n# Wait and detect browser volume\necho \"Waiting for browser volume to be attached...\"\nBROWSER_DEVICE=\"\"\nBROWSER_VOLUME_ID=\"vol-06834ddf3f58d41a8\"\n\n# Wait up to 3 minutes for the volume to appear\nfor i in {1..36}; do\n    echo \"Checking for browser volume... attempt $i/36\"\n    \n    # Check multiple possible device names\n    for device in /dev/xvdf /dev/nvme1n1 /dev/nvme2n1 /dev/sdf; do\n        if [ -b \"$device\" ]; then\n            # Verify this is our browser volume by checking size (8GB)\n            DEVICE_SIZE=$(lsblk -b -n -o SIZE \"$device\" 2\u003e/dev/null | head -n1)\n            if [ \"$DEVICE_SIZE\" = \"8589934592\" ]; then  # 8GB in bytes\n                BROWSER_DEVICE=\"$device\"\n                echo \"✅ Browser volume found at: $BROWSER_DEVICE\"\n                break 2\n            fi\n        fi\n    done\n    \n    # Also try to find by AWS volume ID using nvme-cli (if available)\n    if command -v nvme \u0026\u003e /dev/null; then\n        for nvme_device in /dev/nvme*n1; do\n            if [ -b \"$nvme_device\" ]; then\n                NVME_INFO=$(nvme id-ctrl \"$nvme_device\" 2\u003e/dev/null | grep -o \"vol-[a-zA-Z0-9]*\" | head -n1 || echo \"\")\n                if [ \"$NVME_INFO\" = \"$BROWSER_VOLUME_ID\" ]; then\n                    BROWSER_DEVICE=\"$nvme_device\"\n                    echo \"✅ Browser volume found by volume ID at: $BROWSER_DEVICE\"\n                    break 2\n                fi\n            fi\n        done\n    fi\n    \n    sleep 5\ndone\n\n# Mount the browser volume if found\nif [ -n \"$BROWSER_DEVICE\" ]; then\n    echo \"Mounting browser volume from $BROWSER_DEVICE...\"\n    \n    # Create mount point\n    mkdir -p /mnt/browsers\n    \n    # Mount the browser volume (already formatted and configured)\n    if mount \"$BROWSER_DEVICE\" /mnt/browsers; then\n        echo \"✅ Browser volume mounted successfully!\"\n        \n        # Add to fstab for automatic mounting on boot\n        BROWSER_UUID=$(blkid -s UUID -o value \"$BROWSER_DEVICE\")\n        if [ -n \"$BROWSER_UUID\" ]; then\n            echo \"UUID=$BROWSER_UUID /mnt/browsers ext4 defaults 0 2\" \u003e\u003e /etc/fstab\n            echo \"✅ Added to fstab for automatic mounting\"\n        fi\n        \n        # Set proper ownership\n        chown -R ubuntu:ubuntu /mnt/browsers\n        \n        # Verify our data is there\n        if [ -d \"/mnt/browsers/scripts\" ]; then\n            echo \"✅ Browser scripts found on volume\"\n        fi\n        if [ -d \"/mnt/browsers/Drive\" ]; then\n            echo \"✅ Drive folder found on volume\"\n        fi\n        if [ -d \"/mnt/browsers/brave-data\" ] || [ -d \"/mnt/browsers/firefox-data\" ]; then\n            echo \"✅ Browser profile data found on volume\"\n        fi\n        \n    else\n        echo \"❌ Failed to mount browser volume\"\n        mkdir -p /mnt/browsers\n        chown ubuntu:ubuntu /mnt/browsers\n    fi\nelse\n    echo \"❌ Browser volume not found after 3 minutes\"\n    echo \"Available block devices:\"\n    lsblk\n    echo \"Creating placeholder directory...\"\n    mkdir -p /mnt/browsers\n    chown ubuntu:ubuntu /mnt/browsers\nfi\n\n# Install browsers (binaries need to be installed on each instance)\necho \"Installing browsers...\"\n\n# Install Brave Browser\ncurl -fsSLo /usr/share/keyrings/brave-browser-archive-keyring.gpg https://brave-browser-apt-release.s3.brave.com/brave-browser-archive-keyring.gpg\necho \"deb [signed-by=/usr/share/keyrings/brave-browser-archive-keyring.gpg arch=amd64] https://brave-browser-apt-release.s3.brave.com/ stable main\" | tee /etc/apt/sources.list.d/brave-browser-release.list\napt-get update\napt-get install -y brave-browser\n\n# Install Firefox\napt-get install -y firefox\n\n# Create launcher scripts in home directory (pointing to EBS scripts)\necho \"Creating launcher scripts...\"\n\n# Brave LinkedIn Optimized Launcher\ncat \u003e /home/ubuntu/brave-linkedin.sh \u003c\u003c 'EOF'\n#!/bin/bash\n# Launch optimized Brave script from EBS volume\nif [ -f \"/mnt/browsers/scripts/brave-linkedin.sh\" ]; then\n    /mnt/browsers/scripts/brave-linkedin.sh \"$@\"\nelse\n    echo \"Optimized Brave script not found on EBS volume\"\n    brave-browser --user-data-dir=/mnt/browsers/brave-data \"$@\"\nfi\nEOF\n\n# Firefox LinkedIn Optimized Launcher\ncat \u003e /home/ubuntu/firefox-linkedin.sh \u003c\u003c 'EOF'\n#!/bin/bash\n# Launch optimized Firefox script from EBS volume\nif [ -f \"/mnt/browsers/scripts/firefox-linkedin.sh\" ]; then\n    /mnt/browsers/scripts/firefox-linkedin.sh \"$@\"\nelse\n    echo \"Optimized Firefox script not found on EBS volume\"\n    firefox -profile /mnt/browsers/firefox-data \"$@\"\nfi\nEOF\n\n# Normal Brave Launcher (using EBS data directory)\ncat \u003e /home/ubuntu/brave-normal.sh \u003c\u003c 'EOF'\n#!/bin/bash\n# Normal Brave with EBS data persistence\nbrave-browser \\\n  --user-data-dir=/mnt/browsers/brave-data \\\n  --no-first-run \\\n  --no-default-browser-check \\\n  \"$@\"\nEOF\n\n# Normal Firefox Launcher (using EBS data directory)\ncat \u003e /home/ubuntu/firefox-normal.sh \u003c\u003c 'EOF'\n#!/bin/bash\n# Normal Firefox with EBS data persistence\nmkdir -p /mnt/browsers/firefox-data\nfirefox -profile /mnt/browsers/firefox-data \"$@\"\nEOF\n\n# Make all scripts executable\nchmod +x /home/ubuntu/*.sh\n\n# Create desktop shortcuts\necho \"Creating desktop shortcuts...\"\nmkdir -p /home/ubuntu/Desktop\n\n# Brave LinkedIn Optimized shortcut\ncat \u003e /home/ubuntu/Desktop/Brave-LinkedIn-Optimized.desktop \u003c\u003c 'EOF'\n[Desktop Entry]\nVersion=1.0\nType=Application\nName=Brave LinkedIn (Optimized)\nComment=Brave Browser Optimized for LinkedIn Automation\nExec=/home/ubuntu/brave-linkedin.sh\nIcon=brave-browser\nTerminal=false\nCategories=Network;WebBrowser;\nStartupNotify=true\nEOF\n\n# Firefox LinkedIn Optimized shortcut\ncat \u003e /home/ubuntu/Desktop/Firefox-LinkedIn-Optimized.desktop \u003c\u003c 'EOF'\n[Desktop Entry]\nVersion=1.0\nType=Application\nName=Firefox LinkedIn (Optimized)\nComment=Firefox Browser Optimized for LinkedIn Automation\nExec=/home/ubuntu/firefox-linkedin.sh\nIcon=firefox\nTerminal=false\nCategories=Network;WebBrowser;\nStartupNotify=true\nEOF\n\n# Normal Brave shortcut\ncat \u003e /home/ubuntu/Desktop/Brave-Normal.desktop \u003c\u003c 'EOF'\n[Desktop Entry]\nVersion=1.0\nType=Application\nName=Brave (Normal)\nComment=Brave Browser with Full Features\nExec=/home/ubuntu/brave-normal.sh\nIcon=brave-browser\nTerminal=false\nCategories=Network;WebBrowser;\nStartupNotify=true\nEOF\n\n# Normal Firefox shortcut\ncat \u003e /home/ubuntu/Desktop/Firefox-Normal.desktop \u003c\u003c 'EOF'\n[Desktop Entry]\nVersion=1.0\nType=Application\nName=Firefox (Normal)\nComment=Firefox Browser with Full Features\nExec=/home/ubuntu/firefox-normal.sh\nIcon=firefox\nTerminal=false\nCategories=Network;WebBrowser;\nStartupNotify=true\nEOF\n\n# Browser Volume / Drive folder shortcut\ncat \u003e /home/ubuntu/Desktop/Drive-Folder.desktop \u003c\u003c 'EOF'\n[Desktop Entry]\nVersion=1.0\nType=Application\nName=Drive Folder\nComment=Access Drive folder on Browser Volume\nExec=pcmanfm /mnt/browsers/Drive\nIcon=folder\nTerminal=false\nCategories=System;FileManager;\nStartupNotify=true\nEOF\n\n# Browser Data folder shortcut (for easy access to all browser data)\ncat \u003e /home/ubuntu/Desktop/Browser-Data.desktop \u003c\u003c 'EOF'\n[Desktop Entry]\nVersion=1.0\nType=Application\nName=Browser Data\nComment=Access Browser Data on EBS Volume\nExec=pcmanfm /mnt/browsers\nIcon=folder\nTerminal=false\nCategories=System;FileManager;\nStartupNotify=true\nEOF\n\n# Make desktop shortcuts executable\nchmod +x /home/ubuntu/Desktop/*.desktop\n\n# Create browser volume status check script\ncat \u003e /home/ubuntu/check-browsers.sh \u003c\u003c 'EOF'\n#!/bin/bash\necho \"=== Browser Volume Status ===\"\nif mountpoint -q /mnt/browsers; then\n    echo \"✅ Browser volume is mounted\"\n    echo \"Available space:\"\n    df -h /mnt/browsers\n    echo \"\"\n    echo \"Browser data directories:\"\n    ls -la /mnt/browsers/\n    echo \"\"\n    echo \"Available scripts on volume:\"\n    if [ -d \"/mnt/browsers/scripts\" ]; then\n        ls -la /mnt/browsers/scripts/\n    else\n        echo \"No scripts directory found\"\n    fi\nelse\n    echo \"❌ Browser volume is not mounted\"\n    echo \"Attempting to mount...\"\n    sudo mount /dev/xvdf /mnt/browsers 2\u003e/dev/null\n    if mountpoint -q /mnt/browsers; then\n        echo \"✅ Successfully mounted browser volume\"\n    else\n        echo \"❌ Failed to mount browser volume\"\n    fi\nfi\n\necho \"\"\necho \"=== Available Browser Launchers ===\"\necho \"Optimized Brave:  ~/brave-linkedin.sh (recommended for automation)\"\necho \"Optimized Firefox: ~/firefox-linkedin.sh (backup for automation)\"\necho \"Normal Brave:     ~/brave-normal.sh\"\necho \"Normal Firefox:   ~/firefox-normal.sh\"\necho \"\"\necho \"=== Desktop Shortcuts Available ===\"\necho \"- Brave LinkedIn (Optimized)\"\necho \"- Firefox LinkedIn (Optimized)\"\necho \"- Brave (Normal)\"\necho \"- Firefox (Normal)\"\necho \"- Drive Folder\"\necho \"- Browser Data\"\nEOF\nchmod +x /home/ubuntu/check-browsers.sh\n\n# Set proper ownership for all user files\nchown -R ubuntu:ubuntu /home/ubuntu/\n\n# Clean up to save space\napt-get autoremove -y\napt-get autoclean\nrm -rf /var/lib/apt/lists/*\nrm -rf /tmp/*\n\n# Create startup optimization script\ncat \u003e /home/ubuntu/optimize.sh \u003c\u003c 'EOF'\n#!/bin/bash\n# Run this after connecting to optimize performance\necho \"Optimizing system performance...\"\nsudo sysctl vm.drop_caches=3\nsudo systemctl restart xrdp\necho \"System optimized!\"\nEOF\nchmod +x /home/ubuntu/optimize.sh\nchown ubuntu:ubuntu /home/ubuntu/optimize.sh\n\necho \"Setup complete! Browser volume with persistent data ready for use.\"\necho \"Run ~/check-browsers.sh to verify browser volume status and available launchers\"",
            "vars": null
          },
          "sensitive_attributes": [],
          "identity_schema_version": 0
        }
      ]
    },
    {
      "mode": "managed",
      "type": "aws_eip_association",
      "name": "attach_eip",
      "provider": "provider[\"registry.terraform.io/hashicorp/aws\"]",
      "instances": [
        {
          "schema_version": 0,
          "attributes": {
            "allocation_id": "eipalloc-097c2ba45b51396c8",
            "allow_reassociation": null,
            "id": "eipassoc-0b68e634f37804dfc",
            "instance_id": "i-0278921f0b792c722",
            "network_interface_id": "eni-0598fe94cdc3f1f7b",
            "private_ip_address": "172.31.84.2",
            "public_ip": "13.219.19.98",
            "region": "us-east-1"
          },
          "sensitive_attributes": [],
          "identity_schema_version": 0,
          "private": "bnVsbA==",
          "dependencies": [
            "aws_instance.linkedln_vm",
            "aws_volume_attachment.browser_data",
            "data.aws_ebs_volume.browser_data",
            "data.aws_eip.static",
            "data.aws_security_group.launch_sg",
            "data.template_file.user_data"
          ]
        }
      ]
    },
    {
      "mode": "managed",
      "type": "aws_instance",
      "name": "linkedln_vm",
      "provider": "provider[\"registry.terraform.io/hashicorp/aws\"]",
      "instances": [
        {
          "schema_version": 2,
          "attributes": {
            "ami": "ami-020cba7c55df1f615",
            "arn": "arn:aws:ec2:us-east-1:789994815208:instance/i-0278921f0b792c722",
            "associate_public_ip_address": true,
            "availability_zone": "us-east-1a",
            "capacity_reservation_specification": [
              {
                "capacity_reservation_preference": "open",
                "capacity_reservation_target": []
              }
            ],
            "cpu_options": [
              {
                "amd_sev_snp": "",
                "core_count": 1,
                "threads_per_core": 2
              }
            ],
            "credit_specification": [],
            "disable_api_stop": false,
            "disable_api_termination": false,
            "ebs_block_device": [],
            "ebs_optimized": true,
            "enable_primary_ipv6": null,
            "enclave_options": [
              {
                "enabled": false
              }
            ],
            "ephemeral_block_device": [],
            "get_password_data": false,
            "hibernation": false,
            "host_id": "",
            "host_resource_group_arn": null,
            "iam_instance_profile": "",
            "id": "i-0278921f0b792c722",
            "instance_initiated_shutdown_behavior": "terminate",
            "instance_lifecycle": "spot",
            "instance_market_options": [
              {
                "market_type": "spot",
                "spot_options": [
                  {
                    "instance_interruption_behavior": "terminate",
                    "max_price": "0.100000",
                    "spot_instance_type": "one-time",
                    "valid_until": ""
                  }
                ]
              }
            ],
            "instance_state": "running",
            "instance_type": "m5.large",
            "ipv6_address_count": 0,
            "ipv6_addresses": [],
            "key_name": "LinkedIn-VM",
            "launch_template": [],
            "maintenance_options": [
              {
                "auto_recovery": "default"
              }
            ],
            "metadata_options": [
              {
                "http_endpoint": "enabled",
                "http_protocol_ipv6": "disabled",
                "http_put_response_hop_limit": 2,
                "http_tokens": "required",
                "instance_metadata_tags": "disabled"
              }
            ],
            "monitoring": true,
            "network_interface": [],
            "outpost_arn": "",
            "password_data": "",
            "placement_group": "",
            "placement_partition_number": 0,
            "primary_network_interface_id": "eni-0598fe94cdc3f1f7b",
            "private_dns": "ip-172-31-84-2.ec2.internal",
            "private_dns_name_options": [
              {
                "enable_resource_name_dns_a_record": false,
                "enable_resource_name_dns_aaaa_record": false,
                "hostname_type": "ip-name"
              }
            ],
            "private_ip": "172.31.84.2",
            "public_dns": "ec2-44-204-46-5.compute-1.amazonaws.com",
            "public_ip": "44.204.46.5",
            "region": "us-east-1",
            "root_block_device": [
              {
                "delete_on_termination": true,
                "device_name": "/dev/sda1",
                "encrypted": false,
                "iops": 3000,
                "kms_key_id": "",
                "tags": null,
                "tags_all": {},
                "throughput": 125,
                "volume_id": "vol-0e7d36947415fec2f",
                "volume_size": 14,
                "volume_type": "gp3"
              }
            ],
            "secondary_private_ips": [],
            "security_groups": [
              "launch-wizard-1"
            ],
            "source_dest_check": true,
            "spot_instance_request_id": "sir-eag74jcp",
            "subnet_id": "subnet-0d694e9cd12dfc2cb",
            "tags": {
              "Environment": "Production",
              "Name": "LinkedIn-Spot-VM",
              "Purpose": "Browser-Automation",
              "VolumeSetup": "Configured"
            },
            "tags_all": {
              "Environment": "Production",
              "Name": "LinkedIn-Spot-VM",
              "Purpose": "Browser-Automation",
              "VolumeSetup": "Configured"
            },
            "tenancy": "default",
            "timeouts": null,
            "user_data": "#!/bin/bash\n\n# Update system\napt-get update \u0026\u0026 apt-get upgrade -y\n\n# --- Essential packages only ---\napt-get install -y htop git unzip curl software-properties-common\n\n# Set timezone\ntimedatectl set-timezone America/New_York\n\n# Create 2GB swap file for better performance\nfallocate -l 2G /swapfile\nchmod 600 /swapfile\nmkswap /swapfile\nswapon /swapfile\necho '/swapfile none swap sw 0 0' \u003e\u003e /etc/fstab\n\n# Optimize system performance\ncat \u003e\u003e /etc/sysctl.conf \u003c\u003c EOF\n# Optimize for desktop performance\nvm.swappiness=10\nvm.vfs_cache_pressure=50\nnet.core.rmem_max=16777216\nnet.core.wmem_max=16777216\nEOF\nsysctl -p\n\n# Install lightweight desktop (LXDE)\nDEBIAN_FRONTEND=noninteractive apt-get install -y lxde-core lxdm xrdp ufw\n\necho 'ubuntu:YourStrongPassword' | chpasswd\n\n# Configure RDP session\necho \"startlxde\" \u003e /home/ubuntu/.xsession\nchown ubuntu:ubuntu /home/ubuntu/.xsession\n\n# Optimize RDP for better performance\ncat \u003e\u003e /etc/xrdp/xrdp.ini \u003c\u003c EOF\n[Globals]\nbitmap_cache=yes\nbitmap_compression=yes\nbulk_compression=yes\nmax_bpp=16\nEOF\n\n# Enable and start services\nsystemctl enable xrdp\nsystemctl start xrdp\nsystemctl enable lxdm\n\n# Configure firewall\nufw allow 3389\nufw --force enable\n\n# Wait and detect browser volume\necho \"Waiting for browser volume to be attached...\"\nBROWSER_DEVICE=\"\"\nBROWSER_VOLUME_ID=\"vol-06834ddf3f58d41a8\"\n\n# Wait up to 3 minutes for the volume to appear\nfor i in {1..36}; do\n    echo \"Checking for browser volume... attempt $i/36\"\n    \n    # Check multiple possible device names\n    for device in /dev/xvdf /dev/nvme1n1 /dev/nvme2n1 /dev/sdf; do\n        if [ -b \"$device\" ]; then\n            # Verify this is our browser volume by checking size (8GB)\n            DEVICE_SIZE=$(lsblk -b -n -o SIZE \"$device\" 2\u003e/dev/null | head -n1)\n            if [ \"$DEVICE_SIZE\" = \"8589934592\" ]; then  # 8GB in bytes\n                BROWSER_DEVICE=\"$device\"\n                echo \"✅ Browser volume found at: $BROWSER_DEVICE\"\n                break 2\n            fi\n        fi\n    done\n    \n    # Also try to find by AWS volume ID using nvme-cli (if available)\n    if command -v nvme \u0026\u003e /dev/null; then\n        for nvme_device in /dev/nvme*n1; do\n            if [ -b \"$nvme_device\" ]; then\n                NVME_INFO=$(nvme id-ctrl \"$nvme_device\" 2\u003e/dev/null | grep -o \"vol-[a-zA-Z0-9]*\" | head -n1 || echo \"\")\n                if [ \"$NVME_INFO\" = \"$BROWSER_VOLUME_ID\" ]; then\n                    BROWSER_DEVICE=\"$nvme_device\"\n                    echo \"✅ Browser volume found by volume ID at: $BROWSER_DEVICE\"\n                    break 2\n                fi\n            fi\n        done\n    fi\n    \n    sleep 5\ndone\n\n# Mount the browser volume if found\nif [ -n \"$BROWSER_DEVICE\" ]; then\n    echo \"Mounting browser volume from $BROWSER_DEVICE...\"\n    \n    # Create mount point\n    mkdir -p /mnt/browsers\n    \n    # Mount the browser volume (already formatted and configured)\n    if mount \"$BROWSER_DEVICE\" /mnt/browsers; then\n        echo \"✅ Browser volume mounted successfully!\"\n        \n        # Add to fstab for automatic mounting on boot\n        BROWSER_UUID=$(blkid -s UUID -o value \"$BROWSER_DEVICE\")\n        if [ -n \"$BROWSER_UUID\" ]; then\n            echo \"UUID=$BROWSER_UUID /mnt/browsers ext4 defaults 0 2\" \u003e\u003e /etc/fstab\n            echo \"✅ Added to fstab for automatic mounting\"\n        fi\n        \n        # Set proper ownership\n        chown -R ubuntu:ubuntu /mnt/browsers\n        \n        # Verify our data is there\n        if [ -d \"/mnt/browsers/scripts\" ]; then\n            echo \"✅ Browser scripts found on volume\"\n        fi\n        if [ -d \"/mnt/browsers/Drive\" ]; then\n            echo \"✅ Drive folder found on volume\"\n        fi\n        if [ -d \"/mnt/browsers/brave-data\" ] || [ -d \"/mnt/browsers/firefox-data\" ]; then\n            echo \"✅ Browser profile data found on volume\"\n        fi\n        \n    else\n        echo \"❌ Failed to mount browser volume\"\n        mkdir -p /mnt/browsers\n        chown ubuntu:ubuntu /mnt/browsers\n    fi\nelse\n    echo \"❌ Browser volume not found after 3 minutes\"\n    echo \"Available block devices:\"\n    lsblk\n    echo \"Creating placeholder directory...\"\n    mkdir -p /mnt/browsers\n    chown ubuntu:ubuntu /mnt/browsers\nfi\n\n# Install browsers (binaries need to be installed on each instance)\necho \"Installing browsers...\"\n\n# Install Brave Browser\ncurl -fsSLo /usr/share/keyrings/brave-browser-archive-keyring.gpg https://brave-browser-apt-release.s3.brave.com/brave-browser-archive-keyring.gpg\necho \"deb [signed-by=/usr/share/keyrings/brave-browser-archive-keyring.gpg arch=amd64] https://brave-browser-apt-release.s3.brave.com/ stable main\" | tee /etc/apt/sources.list.d/brave-browser-release.list\napt-get update\napt-get install -y brave-browser\n\n# Install Firefox\napt-get install -y firefox\n\n# Create launcher scripts in home directory (pointing to EBS scripts)\necho \"Creating launcher scripts...\"\n\n# Brave LinkedIn Optimized Launcher\ncat \u003e /home/ubuntu/brave-linkedin.sh \u003c\u003c 'EOF'\n#!/bin/bash\n# Launch optimized Brave script from EBS volume\nif [ -f \"/mnt/browsers/scripts/brave-linkedin.sh\" ]; then\n    /mnt/browsers/scripts/brave-linkedin.sh \"$@\"\nelse\n    echo \"Optimized Brave script not found on EBS volume\"\n    brave-browser --user-data-dir=/mnt/browsers/brave-data \"$@\"\nfi\nEOF\n\n# Firefox LinkedIn Optimized Launcher\ncat \u003e /home/ubuntu/firefox-linkedin.sh \u003c\u003c 'EOF'\n#!/bin/bash\n# Launch optimized Firefox script from EBS volume\nif [ -f \"/mnt/browsers/scripts/firefox-linkedin.sh\" ]; then\n    /mnt/browsers/scripts/firefox-linkedin.sh \"$@\"\nelse\n    echo \"Optimized Firefox script not found on EBS volume\"\n    firefox -profile /mnt/browsers/firefox-data \"$@\"\nfi\nEOF\n\n# Normal Brave Launcher (using EBS data directory)\ncat \u003e /home/ubuntu/brave-normal.sh \u003c\u003c 'EOF'\n#!/bin/bash\n# Normal Brave with EBS data persistence\nbrave-browser \\\n  --user-data-dir=/mnt/browsers/brave-data \\\n  --no-first-run \\\n  --no-default-browser-check \\\n  \"$@\"\nEOF\n\n# Normal Firefox Launcher (using EBS data directory)\ncat \u003e /home/ubuntu/firefox-normal.sh \u003c\u003c 'EOF'\n#!/bin/bash\n# Normal Firefox with EBS data persistence\nmkdir -p /mnt/browsers/firefox-data\nfirefox -profile /mnt/browsers/firefox-data \"$@\"\nEOF\n\n# Make all scripts executable\nchmod +x /home/ubuntu/*.sh\n\n# Create desktop shortcuts\necho \"Creating desktop shortcuts...\"\nmkdir -p /home/ubuntu/Desktop\n\n# Brave LinkedIn Optimized shortcut\ncat \u003e /home/ubuntu/Desktop/Brave-LinkedIn-Optimized.desktop \u003c\u003c 'EOF'\n[Desktop Entry]\nVersion=1.0\nType=Application\nName=Brave LinkedIn (Optimized)\nComment=Brave Browser Optimized for LinkedIn Automation\nExec=/home/ubuntu/brave-linkedin.sh\nIcon=brave-browser\nTerminal=false\nCategories=Network;WebBrowser;\nStartupNotify=true\nEOF\n\n# Firefox LinkedIn Optimized shortcut\ncat \u003e /home/ubuntu/Desktop/Firefox-LinkedIn-Optimized.desktop \u003c\u003c 'EOF'\n[Desktop Entry]\nVersion=1.0\nType=Application\nName=Firefox LinkedIn (Optimized)\nComment=Firefox Browser Optimized for LinkedIn Automation\nExec=/home/ubuntu/firefox-linkedin.sh\nIcon=firefox\nTerminal=false\nCategories=Network;WebBrowser;\nStartupNotify=true\nEOF\n\n# Normal Brave shortcut\ncat \u003e /home/ubuntu/Desktop/Brave-Normal.desktop \u003c\u003c 'EOF'\n[Desktop Entry]\nVersion=1.0\nType=Application\nName=Brave (Normal)\nComment=Brave Browser with Full Features\nExec=/home/ubuntu/brave-normal.sh\nIcon=brave-browser\nTerminal=false\nCategories=Network;WebBrowser;\nStartupNotify=true\nEOF\n\n# Normal Firefox shortcut\ncat \u003e /home/ubuntu/Desktop/Firefox-Normal.desktop \u003c\u003c 'EOF'\n[Desktop Entry]\nVersion=1.0\nType=Application\nName=Firefox (Normal)\nComment=Firefox Browser with Full Features\nExec=/home/ubuntu/firefox-normal.sh\nIcon=firefox\nTerminal=false\nCategories=Network;WebBrowser;\nStartupNotify=true\nEOF\n\n# Browser Volume / Drive folder shortcut\ncat \u003e /home/ubuntu/Desktop/Drive-Folder.desktop \u003c\u003c 'EOF'\n[Desktop Entry]\nVersion=1.0\nType=Application\nName=Drive Folder\nComment=Access Drive folder on Browser Volume\nExec=pcmanfm /mnt/browsers/Drive\nIcon=folder\nTerminal=false\nCategories=System;FileManager;\nStartupNotify=true\nEOF\n\n# Browser Data folder shortcut (for easy access to all browser data)\ncat \u003e /home/ubuntu/Desktop/Browser-Data.desktop \u003c\u003c 'EOF'\n[Desktop Entry]\nVersion=1.0\nType=Application\nName=Browser Data\nComment=Access Browser Data on EBS Volume\nExec=pcmanfm /mnt/browsers\nIcon=folder\nTerminal=false\nCategories=System;FileManager;\nStartupNotify=true\nEOF\n\n# Make desktop shortcuts executable\nchmod +x /home/ubuntu/Desktop/*.desktop\n\n# Create browser volume status check script\ncat \u003e /home/ubuntu/check-browsers.sh \u003c\u003c 'EOF'\n#!/bin/bash\necho \"=== Browser Volume Status ===\"\nif mountpoint -q /mnt/browsers; then\n    echo \"✅ Browser volume is mounted\"\n    echo \"Available space:\"\n    df -h /mnt/browsers\n    echo \"\"\n    echo \"Browser data directories:\"\n    ls -la /mnt/browsers/\n    echo \"\"\n    echo \"Available scripts on volume:\"\n    if [ -d \"/mnt/browsers/scripts\" ]; then\n        ls -la /mnt/browsers/scripts/\n    else\n        echo \"No scripts directory found\"\n    fi\nelse\n    echo \"❌ Browser volume is not mounted\"\n    echo \"Attempting to mount...\"\n    sudo mount /dev/xvdf /mnt/browsers 2\u003e/dev/null\n    if mountpoint -q /mnt/browsers; then\n        echo \"✅ Successfully mounted browser volume\"\n    else\n        echo \"❌ Failed to mount browser volume\"\n    fi\nfi\n\necho \"\"\necho \"=== Available Browser Launchers ===\"\necho \"Optimized Brave:  ~/brave-linkedin.sh (recommended for automation)\"\necho \"Optimized Firefox: ~/firefox-linkedin.sh (backup for automation)\"\necho \"Normal Brave:     ~/brave-normal.sh\"\necho \"Normal Firefox:   ~/firefox-normal.sh\"\necho \"\"\necho \"=== Desktop Shortcuts Available ===\"\necho \"- Brave LinkedIn (Optimized)\"\necho \"- Firefox LinkedIn (Optimized)\"\necho \"- Brave (Normal)\"\necho \"- Firefox (Normal)\"\necho \"- Drive Folder\"\necho \"- Browser Data\"\nEOF\nchmod +x /home/ubuntu/check-browsers.sh\n\n# Set proper ownership for all user files\nchown -R ubuntu:ubuntu /home/ubuntu/\n\n# Clean up to save space\napt-get autoremove -y\napt-get autoclean\nrm -rf /var/lib/apt/lists/*\nrm -rf /tmp/*\n\n# Create startup optimization script\ncat \u003e /home/ubuntu/optimize.sh \u003c\u003c 'EOF'\n#!/bin/bash\n# Run this after connecting to optimize performance\necho \"Optimizing system performance...\"\nsudo sysctl vm.drop_caches=3\nsudo systemctl restart xrdp\necho \"System optimized!\"\nEOF\nchmod +x /home/ubuntu/optimize.sh\nchown ubuntu:ubuntu /home/ubuntu/optimize.sh\n\necho \"Setup complete! Browser volume with persistent data ready for use.\"\necho \"Run ~/check-browsers.sh to verify browser volume status and available launchers\"",
            "user_data_base64": null,
            "user_data_replace_on_change": false,
            "volume_tags": null,
            "vpc_security_group_ids": [
              "sg-08e3357b5355a8c4a"
            ]
          },
          "sensitive_attributes": [],
          "identity_schema_version": 0,
          "private": "eyJlMmJmYjczMC1lY2FhLTExZTYtOGY4OC0zNDM2M2JjN2M0YzAiOnsiY3JlYXRlIjo2MDAwMDAwMDAwMDAsImRlbGV0ZSI6MTIwMDAwMDAwMDAwMCwicmVhZCI6OTAwMDAwMDAwMDAwLCJ1cGRhdGUiOjYwMDAwMDAwMDAwMH0sInNjaGVtYV92ZXJzaW9uIjoiMiJ9",
          "dependencies": [
            "data.aws_ebs_volume.browser_data",
            "data.aws_security_group.launch_sg",
            "data.template_file.user_data"
          ]
        }
      ]
    },
    {
      "mode": "managed",
      "type": "aws_volume_attachment",
      "name": "browser_data",
      "provider": "provider[\"registry.terraform.io/hashicorp/aws\"]",
      "instances": [
        {
          "schema_version": 0,
          "attributes": {
            "device_name": "/dev/xvdf",
            "force_detach": true,
            "id": "vai-1507510104",
            "instance_id": "i-0278921f0b792c722",
            "region": "us-east-1",
            "skip_destroy": null,
            "stop_instance_before_detaching": null,
            "timeouts": null,
            "volume_id": "vol-06834ddf3f58d41a8"
          },
          "sensitive_attributes": [],
          "identity_schema_version": 0,
          "private": "eyJlMmJmYjczMC1lY2FhLTExZTYtOGY4OC0zNDM2M2JjN2M0YzAiOnsiY3JlYXRlIjozMDAwMDAwMDAwMDAsImRlbGV0ZSI6MzAwMDAwMDAwMDAwfX0=",
          "dependencies": [
            "aws_instance.linkedln_vm",
            "data.aws_ebs_volume.browser_data",
            "data.aws_security_group.launch_sg",
            "data.template_file.user_data"
          ]
        }
      ]
    }
  ],
  "check_results": [
    {
      "object_kind": "var",
      "config_addr": "var.instance_type",
      "status": "pass",
      "objects": [
        {
          "object_addr": "var.instance_type",
          "status": "pass"
        }
      ]
    },
    {
      "object_kind": "var",
      "config_addr": "var.security_group_id",
      "status": "pass",
      "objects": [
        {
          "object_addr": "var.security_group_id",
          "status": "pass"
        }
      ]
    },
    {
      "object_kind": "var",
      "config_addr": "var.ami_id",
      "status": "pass",
      "objects": [
        {
          "object_addr": "var.ami_id",
          "status": "pass"
        }
      ]
    },
    {
      "object_kind": "var",
      "config_addr": "var.volume_size",
      "status": "pass",
      "objects": [
        {
          "object_addr": "var.volume_size",
          "status": "pass"
        }
      ]
    },
    {
      "object_kind": "var",
      "config_addr": "var.spot_max_price",
      "status": "pass",
      "objects": [
        {
          "object_addr": "var.spot_max_price",
          "status": "pass"
        }
      ]
    },
    {
      "object_kind": "var",
      "config_addr": "var.root_volume_type",
      "status": "pass",
      "objects": [
        {
          "object_addr": "var.root_volume_type",
          "status": "pass"
        }
      ]
    },
    {
      "object_kind": "var",
      "config_addr": "var.dummy_instance_id",
      "status": "pass",
      "objects": [
        {
          "object_addr": "var.dummy_instance_id",
          "status": "pass"
        }
      ]
    },
    {
      "object_kind": "var",
      "config_addr": "var.eip_allocation_id",
      "status": "pass",
      "objects": [
        {
          "object_addr": "var.eip_allocation_id",
          "status": "pass"
        }
      ]
    },
    {
      "object_kind": "var",
      "config_addr": "var.browser_volume_id",
      "status": "pass",
      "objects": [
        {
          "object_addr": "var.browser_volume_id",
          "status": "pass"
        }
      ]
    }
  ]
}
